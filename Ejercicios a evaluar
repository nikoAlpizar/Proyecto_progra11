"""
Todos los ejercicios van a estar comentados
Trabajo hecho por Nikolas (Ignore el hecho que el proyecto esta en la misma carpeta que estos ejercicios)
"""

"""
Ejercio 1

n = int(input("numero"))

def esPerfecto(n):
    s = 0
    for i in range(1, n // 2 + 1):
        if n % i == 0:
            s += i
    return s == n

print(esPerfecto(n))
"""


"""
Ejercicio 2

x1 = float(input("Ingrese la coordenada x del primer punto: "))
y1 = float(input("Ingrese la coordenada y del primer punto: "))
x2 = float(input("Ingrese la coordenada x del segundo punto: "))
y2 = float(input("Ingrese la coordenada y del segundo punto: "))
dx = x2 - x1
dy = y2 - y1
distancia = (dx**2 + dy**2) ** 0.5
print("La distancia entre los dos puntos es:", distancia)
"""

"""
Ejercicio 3

año = int(input("Ingrese un año: "))


if (año % 4 == 0 and año % 100 != 0) or (año % 400 == 0):
    print(f"El año {año} es bisiesto.")
else:
    print(f"El año {año} no es bisiesto.")
"""
"""
Ejercicio 4


class Calculadora:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def suma(self):
        return self.num1 + self.num2

    def resta(self):
        return self.num1 - self.num2

    def multiplicacion(self):
        return self.num1 * self.num2

    def division(self):
        if self.num2 != 0:
            return self.num1 / self.num2
        else:
            return "Error: División por cero"


n1 = int(input("Ingrese el primer número: "))
n2 = int(input("Ingrese el segundo número: "))


calc = Calculadora(n1, n2)


print("Suma:", calc.suma())
print("Resta:", calc.resta())
print("Multiplicación:", calc.multiplicacion())
print("División:", calc.division())
"""

"""
Ejercicio 5

n = int(input("Ingrese un número entero no negativo: "))


if n < 0:
    print("El factorial no está definido para números negativos.")
else:
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    print(f"El factorial de {n} es {factorial}")
"""

'''
Ejercicio 6

palabras = []

cantidad = int(input("¿Cuántas palabras desea ingresar? "))

for i in range(cantidad):
    palabra = input(f"Ingrese la palabra #{i + 1}: ")
    palabras.append(palabra)


palabras_invertidas = palabras[::-1]


print("\nLista original:", palabras)
print("Lista invertida:", palabras_invertidas)
'''

"""
Ejercicio 7

def cuadrados(lista):
    return [x**2 for x in lista]


cantidad = int(input("¿Cuántos números desea ingresar? "))


numeros = []

for i in range(cantidad):
    numero = float(input(f"Ingrese el número #{i + 1}: "))
    numeros.append(numero)


resultado = cuadrados(numeros)
print("\nLista original:", numeros)
print("Lista con cuadrados:", resultado)
"""

"""
Ejercicio 8

def mcd(a, b):
    while b != 0:
        a, b = b, a % b
    return abs(a)

def mcm(a, b):
    return abs(a * b) // mcd(a, b)


num1 = int(input("Ingrese el primer número: "))
num2 = int(input("Ingrese el segundo número: "))
 

resultado_mcd = mcd(num1, num2)
resultado_mcm = mcm(num1, num2)


print(f"\nEl MCD de {num1} y {num2} es: {resultado_mcd}")
print(f"El MCM de {num1} y {num2} es: {resultado_mcm}")
"""

"""
Ejercicio 9

class Coche:
    def __init__(self, matricula, marca, kilometros_recorridos, gasolina):
        self.matricula = matricula
        self.marca = marca
        self.kilometros_recorridos = kilometros_recorridos
        self.gasolina = gasolina

    def avanzar(self, kilometros):
        consumo = kilometros * 0.1
        if consumo > self.gasolina:
            print("Es necesario repostar para recorrer la cantidad indicada de kilómetros")
        else:
            self.kilometros_recorridos += kilometros
            self.gasolina -= consumo
            print(f"El coche ha recorrido {kilometros} km. Gasolina restante: {self.gasolina:.2f} litros")

    def repostar(self, litros):
        self.gasolina += litros
        print(f"Se han añadido {litros} litros de gasolina. Total ahora: {self.gasolina:.2f} litros")



mi_coche = Coche("1234ABC", "Toyota", 5000.0, 10.0)

mi_coche.avanzar(50)    
mi_coche.repostar(5)     
mi_coche.avanzar(30)   
"""

"""
Ejercicio 10

class Robot:
    def __init__(self):
        self.x = 0
        self.y = 0

    def mueve(self, orden):
        if orden == 'A':
            self.y += 1
        elif orden == 'R':
            self.y -= 1
        elif orden == 'I':
            self.x -= 1
        elif orden == 'D':
            self.x += 1
        else:
            print(f"Orden inválida: {orden}")

    def posicion_actual(self):
        return (self.x, self.y)
"""
